//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ILFramework_SoundManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ILFramework.SoundManager), typeof(ILFramework.Manager<ILFramework.SoundManager>));
		L.RegFunction("PlayClip", PlayClip);
		L.RegFunction("StopAudio", StopAudio);
		L.RegFunction("ShowVoiceBtn", ShowVoiceBtn);
		L.RegFunction("SetShield", SetShield);
		L.RegFunction("ReSetVoiceBtnEnable", ReSetVoiceBtnEnable);
		L.RegFunction("ResetAllVoiceBtnEvent", ResetAllVoiceBtnEvent);
		L.RegFunction("SetVoiceBtnEvent", SetVoiceBtnEvent);
		L.RegFunction("Speaking", Speaking);
		L.RegFunction("PlayClipByEvent", PlayClipByEvent);
		L.RegFunction("ResetAudio", ResetAudio);
		L.RegFunction("StopAllSoundCoroutine", StopAllSoundCoroutine);
		L.RegFunction("GetLength", GetLength);
		L.RegFunction("ResetStatus", ResetStatus);
		L.RegFunction("ResetClip", ResetClip);
		L.RegFunction("StopAll", StopAll);
		L.RegFunction("Stop", Stop);
		L.RegFunction("SetLuaVoiceCallBack", SetLuaVoiceCallBack);
		L.RegFunction("BgSoundPart1", BgSoundPart1);
		L.RegFunction("BgSoundPart2", BgSoundPart2);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("voiceBtn", get_voiceBtn, set_voiceBtn);
		L.RegVar("sheildGo", get_sheildGo, set_sheildGo);
		L.RegVar("sheild", get_sheild, set_sheild);
		L.RegVar("skipEvent", get_skipEvent, set_skipEvent);
		L.RegVar("skipBtn", get_skipBtn, set_skipBtn);
		L.RegVar("isShowSkipBtn", get_isShowSkipBtn, set_isShowSkipBtn);
		L.RegVar("audiosPrefabName", get_audiosPrefabName, set_audiosPrefabName);
		L.RegVar("bgmSource", get_bgmSource, set_bgmSource);
		L.RegVar("voiceSource", get_voiceSource, set_voiceSource);
		L.RegVar("soundSource", get_soundSource, set_soundSource);
		L.RegVar("commonClips", get_commonClips, set_commonClips);
		L.RegVar("bebo1_commonClips", get_bebo1_commonClips, set_bebo1_commonClips);
		L.RegVar("audioClips", get_audioClips, set_audioClips);
		L.RegVar("soundTypes", get_soundTypes, set_soundTypes);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayClip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				float o = obj.PlayClip(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float o = obj.PlayClip(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<ILFramework.SoundManager.SoundType, int>(L, 2))
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				float o = obj.PlayClip(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, string, string>(L, 2))
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				float o = obj.PlayClip(arg0, arg1, arg2);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<ILFramework.SoundManager.SoundType, int, bool>(L, 2))
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				float o = obj.PlayClip(arg0, arg1, arg2);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.PlayClip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAudio(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				obj.StopAudio();
				return 0;
			}
			else if (count == 2)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				obj.StopAudio(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.StopAudio");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowVoiceBtn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ShowVoiceBtn(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShield(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetShield(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReSetVoiceBtnEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			obj.ReSetVoiceBtnEnable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetAllVoiceBtnEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			obj.ResetAllVoiceBtnEvent();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVoiceBtnEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.SetVoiceBtnEvent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Speaking(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				ILFramework.SoundManager.SoundType arg2 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 4, typeof(ILFramework.SoundManager.SoundType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				obj.Speaking(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				ILFramework.SoundManager.SoundType arg2 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 4, typeof(ILFramework.SoundManager.SoundType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 6);
				obj.Speaking(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				ILFramework.SoundManager.SoundType arg2 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 4, typeof(ILFramework.SoundManager.SoundType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 6);
				System.Action arg5 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 7);
				obj.Speaking(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.Speaking");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayClipByEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.PlayClipByEvent(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				obj.PlayClipByEvent(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				obj.PlayClipByEvent(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.PlayClipByEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			obj.ResetAudio();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllSoundCoroutine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			obj.StopAllSoundCoroutine();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLength(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				float o = obj.GetLength(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float o = obj.GetLength(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<ILFramework.SoundManager.SoundType, int>(L, 2))
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				float o = obj.GetLength(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				float o = obj.GetLength(arg0, arg1, arg2);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.GetLength");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			obj.ResetStatus();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetClip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				obj.ResetClip();
				return 0;
			}
			else if (count == 2)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.ResetClip(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.ResetClip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			obj.StopAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				obj.Stop();
				return 0;
			}
			else if (count == 2)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.Stop(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.Stop");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLuaVoiceCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.SetLuaVoiceCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BgSoundPart1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				obj.BgSoundPart1();
				return 0;
			}
			else if (count == 2)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				obj.BgSoundPart1(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.BgSoundPart1(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.BgSoundPart1");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BgSoundPart2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				obj.BgSoundPart2();
				return 0;
			}
			else if (count == 2)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				obj.BgSoundPart2(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ILFramework.SoundManager obj = (ILFramework.SoundManager)ToLua.CheckObject<ILFramework.SoundManager>(L, 1);
				ILFramework.SoundManager.SoundType arg0 = (ILFramework.SoundManager.SoundType)ToLua.CheckObject(L, 2, typeof(ILFramework.SoundManager.SoundType));
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.BgSoundPart2(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SoundManager.BgSoundPart2");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_voiceBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject ret = obj.voiceBtn;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index voiceBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sheildGo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject ret = obj.sheildGo;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sheildGo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sheild(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject ret = obj.sheild;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sheild on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skipEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			System.Action ret = obj.skipEvent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skipEvent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skipBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject ret = obj.skipBtn;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skipBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isShowSkipBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			bool ret = obj.isShowSkipBtn;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isShowSkipBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_audiosPrefabName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			string[] ret = obj.audiosPrefabName;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index audiosPrefabName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bgmSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioSource ret = obj.bgmSource;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bgmSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_voiceSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioSource ret = obj.voiceSource;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index voiceSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_soundSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioSource ret = obj.soundSource;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index soundSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_commonClips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]> ret = obj.commonClips;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index commonClips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bebo1_commonClips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioClip[] ret = obj.bebo1_commonClips;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bebo1_commonClips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_audioClips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]>> ret = obj.audioClips;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index audioClips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_soundTypes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			ILFramework.SoundManager.SoundType[] ret = obj.soundTypes;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index soundTypes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_voiceBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.voiceBtn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index voiceBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sheildGo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.sheildGo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sheildGo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sheild(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.sheild = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sheild on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skipEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.skipEvent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skipEvent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skipBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.skipBtn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skipBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isShowSkipBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isShowSkipBtn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isShowSkipBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_audiosPrefabName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.audiosPrefabName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index audiosPrefabName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bgmSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.bgmSource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bgmSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_voiceSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.voiceSource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index voiceSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_soundSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.soundSource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index soundSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_commonClips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]> arg0 = (System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]>));
			obj.commonClips = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index commonClips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bebo1_commonClips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			UnityEngine.AudioClip[] arg0 = ToLua.CheckObjectArray<UnityEngine.AudioClip>(L, 2);
			obj.bebo1_commonClips = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bebo1_commonClips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_audioClips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]>> arg0 = (System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<ILFramework.SoundManager.SoundType,UnityEngine.AudioClip[]>>));
			obj.audioClips = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index audioClips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_soundTypes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ILFramework.SoundManager obj = (ILFramework.SoundManager)o;
			ILFramework.SoundManager.SoundType[] arg0 = ToLua.CheckStructArray<ILFramework.SoundManager.SoundType>(L, 2);
			obj.soundTypes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index soundTypes on a nil value");
		}
	}
}

