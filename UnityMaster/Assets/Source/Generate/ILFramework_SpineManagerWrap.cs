//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ILFramework_SpineManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ILFramework.SpineManager), typeof(ILFramework.Manager<ILFramework.SpineManager>));
		L.RegFunction("getAnimationState", getAnimationState);
		L.RegFunction("GetAnimationLength", GetAnimationLength);
		L.RegFunction("GetCurrentAnimationName", GetCurrentAnimationName);
		L.RegFunction("DoAnimation", DoAnimation);
		L.RegFunction("DoAnimationLua", DoAnimationLua);
		L.RegFunction("ClearTrack", ClearTrack);
		L.RegFunction("SetFreeze", SetFreeze);
		L.RegFunction("PlayAnimationState", PlayAnimationState);
		L.RegFunction("PlayAnimationDuring", PlayAnimationDuring);
		L.RegFunction("SetTimeScale", SetTimeScale);
		L.RegFunction("CreateRegionAttachmentByTexture", CreateRegionAttachmentByTexture);
		L.RegFunction("HideSpineTexture", HideSpineTexture);
		L.RegFunction("ShowSpineTexture", ShowSpineTexture);
		L.RegFunction("DressUp", DressUp);
		L.RegFunction("Refresh", Refresh);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getAnimationState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			Spine.AnimationState o = obj.getAnimationState(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimationLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			float o = obj.GetAnimationLength(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentAnimationName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string o = obj.GetCurrentAnimationName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				float o = obj.DoAnimation(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				float o = obj.DoAnimation(arg0, arg1, arg2);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				float o = obj.DoAnimation(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.DoAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoAnimationLua(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				float o = obj.DoAnimationLua(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				float o = obj.DoAnimationLua(arg0, arg1, arg2);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
				float o = obj.DoAnimationLua(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.DoAnimationLua");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearTrack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.ClearTrack(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.ClearTrack(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.ClearTrack");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFreeze(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetFreeze(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAnimationState(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Spine.Unity.SkeletonAnimation, string>(L, 2))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.SkeletonAnimation arg0 = (Spine.Unity.SkeletonAnimation)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.PlayAnimationState(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Spine.Unity.SkeletonGraphic, string>(L, 2))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.SkeletonGraphic arg0 = (Spine.Unity.SkeletonGraphic)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.PlayAnimationState(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Spine.Unity.SkeletonAnimation, string, string>(L, 2))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.SkeletonAnimation arg0 = (Spine.Unity.SkeletonAnimation)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				obj.PlayAnimationState(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Spine.Unity.SkeletonGraphic, string, string>(L, 2))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.SkeletonGraphic arg0 = (Spine.Unity.SkeletonGraphic)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				obj.PlayAnimationState(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.PlayAnimationState");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAnimationDuring(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.PlayAnimationDuring(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.PlayAnimationDuring(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.PlayAnimationDuring");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTimeScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetTimeScale(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateRegionAttachmentByTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.SkeletonAnimation arg0 = (Spine.Unity.SkeletonAnimation)ToLua.CheckObject<Spine.Unity.SkeletonAnimation>(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				UnityEngine.Sprite arg2 = (UnityEngine.Sprite)ToLua.CheckObject(L, 4, typeof(UnityEngine.Sprite));
				UnityEngine.Shader arg3 = (UnityEngine.Shader)ToLua.CheckObject(L, 5, typeof(UnityEngine.Shader));
				obj.CreateRegionAttachmentByTexture(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.AtlasAsset arg0 = (Spine.Unity.AtlasAsset)ToLua.CheckObject<Spine.Unity.AtlasAsset>(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.CheckObject(L, 4, typeof(UnityEngine.GameObject));
				UnityEngine.GameObject arg3 = (UnityEngine.GameObject)ToLua.CheckObject(L, 5, typeof(UnityEngine.GameObject));
				UnityEngine.Shader arg4 = (UnityEngine.Shader)ToLua.CheckObject(L, 6, typeof(UnityEngine.Shader));
				obj.CreateRegionAttachmentByTexture(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.CreateRegionAttachmentByTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideSpineTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Spine.Unity.SkeletonAnimation, string>(L, 2))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.SkeletonAnimation arg0 = (Spine.Unity.SkeletonAnimation)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.HideSpineTexture(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Spine.Unity.SkeletonGraphic, string>(L, 2))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Unity.SkeletonGraphic arg0 = (Spine.Unity.SkeletonGraphic)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.HideSpineTexture(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.HideSpineTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowSpineTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
			Spine.Unity.SkeletonAnimation arg0 = (Spine.Unity.SkeletonAnimation)ToLua.CheckObject<Spine.Unity.SkeletonAnimation>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.ShowSpineTexture(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DressUp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 7 && TypeChecker.CheckTypes<UnityEngine.Sprite, string, string, UnityEngine.Shader>(L, 4))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Skeleton arg0 = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 2);
				Spine.Skin arg1 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 3);
				UnityEngine.Sprite arg2 = (UnityEngine.Sprite)ToLua.ToObject(L, 4);
				string arg3 = ToLua.ToString(L, 5);
				string arg4 = ToLua.ToString(L, 6);
				UnityEngine.Shader arg5 = (UnityEngine.Shader)ToLua.ToObject(L, 7);
				obj.DressUp(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 7 && TypeChecker.CheckTypes<Spine.Unity.AtlasAsset, string, string, string>(L, 4))
			{
				ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
				Spine.Skeleton arg0 = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 2);
				Spine.Skin arg1 = (Spine.Skin)ToLua.CheckObject<Spine.Skin>(L, 3);
				Spine.Unity.AtlasAsset arg2 = (Spine.Unity.AtlasAsset)ToLua.ToObject(L, 4);
				string arg3 = ToLua.ToString(L, 5);
				string arg4 = ToLua.ToString(L, 6);
				string arg5 = ToLua.ToString(L, 7);
				obj.DressUp(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ILFramework.SpineManager.DressUp");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Refresh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ILFramework.SpineManager obj = (ILFramework.SpineManager)ToLua.CheckObject<ILFramework.SpineManager>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			UnityEngine.Shader arg1 = (UnityEngine.Shader)ToLua.CheckObject(L, 3, typeof(UnityEngine.Shader));
			obj.Refresh(ref arg0, arg1);
			ToLua.Push(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

