//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vectrosity_VectorLineWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vectrosity.VectorLine), typeof(System.Object));
		L.RegFunction("Version", Version);
		L.RegFunction("Resize", Resize);
		L.RegFunction("AddNormals", AddNormals);
		L.RegFunction("AddTangents", AddTangents);
		L.RegFunction("CalculateTangents", CalculateTangents);
		L.RegFunction("SetupVectorCanvas", SetupVectorCanvas);
		L.RegFunction("SetCanvasCamera", SetCanvasCamera);
		L.RegFunction("SetCanvas", SetCanvas);
		L.RegFunction("SetMask", SetMask);
		L.RegFunction("SetCamera3D", SetCamera3D);
		L.RegFunction("CameraHasMoved", CameraHasMoved);
		L.RegFunction("UpdateCameraInfo", UpdateCameraInfo);
		L.RegFunction("GetSegmentNumber", GetSegmentNumber);
		L.RegFunction("SetEndCapColor", SetEndCapColor);
		L.RegFunction("SetEndCapIndex", SetEndCapIndex);
		L.RegFunction("SetColor", SetColor);
		L.RegFunction("SetColors", SetColors);
		L.RegFunction("GetColor", GetColor);
		L.RegFunction("SetWidth", SetWidth);
		L.RegFunction("SetWidths", SetWidths);
		L.RegFunction("GetWidth", GetWidth);
		L.RegFunction("SetLine", SetLine);
		L.RegFunction("SetLine3D", SetLine3D);
		L.RegFunction("SetRay", SetRay);
		L.RegFunction("SetRay3D", SetRay3D);
		L.RegFunction("Draw", Draw);
		L.RegFunction("Draw3D", Draw3D);
		L.RegFunction("LineManagerCheckDistance", LineManagerCheckDistance);
		L.RegFunction("LineManagerDisable", LineManagerDisable);
		L.RegFunction("LineManagerEnable", LineManagerEnable);
		L.RegFunction("Draw3DAuto", Draw3DAuto);
		L.RegFunction("StopDrawing3DAuto", StopDrawing3DAuto);
		L.RegFunction("BytesToVector3List", BytesToVector3List);
		L.RegFunction("BytesToVector2List", BytesToVector2List);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("SetDistances", SetDistances);
		L.RegFunction("GetLength", GetLength);
		L.RegFunction("GetPoint01", GetPoint01);
		L.RegFunction("GetPoint", GetPoint);
		L.RegFunction("GetPoint3D01", GetPoint3D01);
		L.RegFunction("GetPoint3D", GetPoint3D);
		L.RegFunction("SetEndCap", SetEndCap);
		L.RegFunction("RemoveEndCap", RemoveEndCap);
		L.RegFunction("Selected", Selected);
		L.RegFunction("MakeRect", MakeRect);
		L.RegFunction("MakeRoundedRect", MakeRoundedRect);
		L.RegFunction("MakeCircle", MakeCircle);
		L.RegFunction("MakeEllipse", MakeEllipse);
		L.RegFunction("MakeArc", MakeArc);
		L.RegFunction("MakeCurve", MakeCurve);
		L.RegFunction("MakeSpline", MakeSpline);
		L.RegFunction("MakeText", MakeText);
		L.RegFunction("MakeWireframe", MakeWireframe);
		L.RegFunction("MakeCube", MakeCube);
		L.RegFunction("New", _CreateVectrosity_VectorLine);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("lineVertices", get_lineVertices, null);
		L.RegVar("lineUVs", get_lineUVs, null);
		L.RegVar("lineColors", get_lineColors, null);
		L.RegVar("lineTriangles", get_lineTriangles, null);
		L.RegVar("rectTransform", get_rectTransform, null);
		L.RegVar("color", get_color, set_color);
		L.RegVar("is2D", get_is2D, null);
		L.RegVar("points2", get_points2, set_points2);
		L.RegVar("points3", get_points3, set_points3);
		L.RegVar("lineWidth", get_lineWidth, set_lineWidth);
		L.RegVar("maxWeldDistance", get_maxWeldDistance, set_maxWeldDistance);
		L.RegVar("name", get_name, set_name);
		L.RegVar("material", get_material, set_material);
		L.RegVar("texture", get_texture, set_texture);
		L.RegVar("layer", get_layer, set_layer);
		L.RegVar("active", get_active, set_active);
		L.RegVar("lineType", get_lineType, set_lineType);
		L.RegVar("capLength", get_capLength, set_capLength);
		L.RegVar("smoothWidth", get_smoothWidth, set_smoothWidth);
		L.RegVar("smoothColor", get_smoothColor, set_smoothColor);
		L.RegVar("joins", get_joins, set_joins);
		L.RegVar("isAutoDrawing", get_isAutoDrawing, null);
		L.RegVar("drawStart", get_drawStart, set_drawStart);
		L.RegVar("drawEnd", get_drawEnd, set_drawEnd);
		L.RegVar("endPointsUpdate", get_endPointsUpdate, set_endPointsUpdate);
		L.RegVar("endCap", get_endCap, set_endCap);
		L.RegVar("continuousTexture", get_continuousTexture, set_continuousTexture);
		L.RegVar("drawTransform", get_drawTransform, set_drawTransform);
		L.RegVar("useViewportCoords", get_useViewportCoords, set_useViewportCoords);
		L.RegVar("textureScale", get_textureScale, set_textureScale);
		L.RegVar("textureOffset", get_textureOffset, set_textureOffset);
		L.RegVar("matrix", get_matrix, set_matrix);
		L.RegVar("drawDepth", get_drawDepth, set_drawDepth);
		L.RegVar("collider", get_collider, set_collider);
		L.RegVar("trigger", get_trigger, set_trigger);
		L.RegVar("physicsMaterial", get_physicsMaterial, set_physicsMaterial);
		L.RegVar("alignOddWidthToPixels", get_alignOddWidthToPixels, set_alignOddWidthToPixels);
		L.RegVar("canvas", get_canvas, null);
		L.RegVar("camTransformPosition", get_camTransformPosition, null);
		L.RegVar("camTransformExists", get_camTransformExists, null);
		L.RegVar("lineManager", get_lineManager, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVectrosity_VectorLine(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector3>, float>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector2>, float>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector2> arg1 = (System.Collections.Generic.List<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector3>, float, Vectrosity.LineType>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				Vectrosity.LineType arg3 = (Vectrosity.LineType)ToLua.ToObject(L, 4);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector2>, float, Vectrosity.LineType>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector2> arg1 = (System.Collections.Generic.List<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				Vectrosity.LineType arg3 = (Vectrosity.LineType)ToLua.ToObject(L, 4);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector3>, UnityEngine.Texture, float>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector2>, UnityEngine.Texture, float>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector2> arg1 = (System.Collections.Generic.List<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector3>, float, Vectrosity.LineType, Vectrosity.Joins>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				Vectrosity.LineType arg3 = (Vectrosity.LineType)ToLua.ToObject(L, 4);
				Vectrosity.Joins arg4 = (Vectrosity.Joins)ToLua.ToObject(L, 5);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector2>, float, Vectrosity.LineType, Vectrosity.Joins>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector2> arg1 = (System.Collections.Generic.List<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				Vectrosity.LineType arg3 = (Vectrosity.LineType)ToLua.ToObject(L, 4);
				Vectrosity.Joins arg4 = (Vectrosity.Joins)ToLua.ToObject(L, 5);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector3>, UnityEngine.Texture, float, Vectrosity.LineType>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				Vectrosity.LineType arg4 = (Vectrosity.LineType)ToLua.ToObject(L, 5);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector2>, UnityEngine.Texture, float, Vectrosity.LineType>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector2> arg1 = (System.Collections.Generic.List<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				Vectrosity.LineType arg4 = (Vectrosity.LineType)ToLua.ToObject(L, 5);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector3>, UnityEngine.Texture, float, Vectrosity.LineType, Vectrosity.Joins>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				Vectrosity.LineType arg4 = (Vectrosity.LineType)ToLua.ToObject(L, 5);
				Vectrosity.Joins arg5 = (Vectrosity.Joins)ToLua.ToObject(L, 6);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Vector2>, UnityEngine.Texture, float, Vectrosity.LineType, Vectrosity.Joins>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<UnityEngine.Vector2> arg1 = (System.Collections.Generic.List<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				Vectrosity.LineType arg4 = (Vectrosity.LineType)ToLua.ToObject(L, 5);
				Vectrosity.Joins arg5 = (Vectrosity.Joins)ToLua.ToObject(L, 6);
				Vectrosity.VectorLine obj = new Vectrosity.VectorLine(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Vectrosity.VectorLine.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Version(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Vectrosity.VectorLine.Version();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Resize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Resize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddNormals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			obj.AddNormals();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTangents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			obj.AddTangents();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateTangents(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
			UnityEngine.Vector4[] o = obj.CalculateTangents(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetupVectorCanvas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.GameObject o = Vectrosity.VectorLine.SetupVectorCanvas();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCanvasCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
			Vectrosity.VectorLine.SetCanvasCamera(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCanvas(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.SetCanvas(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Canvas>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Canvas arg0 = (UnityEngine.Canvas)ToLua.ToObject(L, 2);
				obj.SetCanvas(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GameObject, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.SetCanvas(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Canvas, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Canvas arg0 = (UnityEngine.Canvas)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.SetCanvas(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetCanvas");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMask(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.SetMask(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.UI.Mask>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.UI.Mask arg0 = (UnityEngine.UI.Mask)ToLua.ToObject(L, 2);
				obj.SetMask(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GameObject, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.SetMask(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.UI.Mask, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.UI.Mask arg0 = (UnityEngine.UI.Mask)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.SetMask(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetMask");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCamera3D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Vectrosity.VectorLine.SetCamera3D();
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 1))
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 1);
				Vectrosity.VectorLine.SetCamera3D(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Camera>(L, 1))
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.ToObject(L, 1);
				Vectrosity.VectorLine.SetCamera3D(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetCamera3D");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraHasMoved(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = Vectrosity.VectorLine.CameraHasMoved();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCameraInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Vectrosity.VectorLine.UpdateCameraInfo();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSegmentNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			int o = obj.GetSegmentNumber();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEndCapColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Color32 arg0 = StackTraits<UnityEngine.Color32>.Check(L, 2);
				obj.SetEndCapColor(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Color32 arg0 = StackTraits<UnityEngine.Color32>.Check(L, 2);
				UnityEngine.Color32 arg1 = StackTraits<UnityEngine.Color32>.Check(L, 3);
				obj.SetEndCapColor(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetEndCapColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEndCapIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			Vectrosity.EndCap arg0 = (Vectrosity.EndCap)ToLua.CheckObject(L, 2, typeof(Vectrosity.EndCap));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetEndCapIndex(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Color32 arg0 = StackTraits<UnityEngine.Color32>.Check(L, 2);
				obj.SetColor(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Color32 arg0 = StackTraits<UnityEngine.Color32>.Check(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.SetColor(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Color32 arg0 = StackTraits<UnityEngine.Color32>.Check(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.SetColor(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColors(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			System.Collections.Generic.List<UnityEngine.Color32> arg0 = (System.Collections.Generic.List<UnityEngine.Color32>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Color32>));
			obj.SetColors(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Color32 o = obj.GetColor(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidth(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.SetWidth(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.SetWidth(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.SetWidth(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetWidth");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidths(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.List<float>>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				System.Collections.Generic.List<float> arg0 = (System.Collections.Generic.List<float>)ToLua.ToObject(L, 2);
				obj.SetWidths(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.List<int>>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				System.Collections.Generic.List<int> arg0 = (System.Collections.Generic.List<int>)ToLua.ToObject(L, 2);
				obj.SetWidths(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetWidths");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float o = obj.GetWidth(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLine(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<UnityEngine.Color, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Vector2>(L, 3, count - 2))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Vector2[] arg2 = ToLua.ToParamsObject<UnityEngine.Vector2>(L, 3, count - 2);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetLine(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<UnityEngine.Color, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Vector3>(L, 3, count - 2))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Vector3[] arg2 = ToLua.ToParamsObject<UnityEngine.Vector3>(L, 3, count - 2);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetLine(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<UnityEngine.Color>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Vector2>(L, 2, count - 1))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				UnityEngine.Vector2[] arg1 = ToLua.ToParamsObject<UnityEngine.Vector2>(L, 2, count - 1);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetLine(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<UnityEngine.Color>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Vector3>(L, 2, count - 1))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				UnityEngine.Vector3[] arg1 = ToLua.ToParamsObject<UnityEngine.Vector3>(L, 2, count - 1);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetLine(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetLine");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLine3D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<UnityEngine.Color, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Vector3>(L, 3, count - 2))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Vector3[] arg2 = ToLua.ToParamsObject<UnityEngine.Vector3>(L, 3, count - 2);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetLine3D(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<UnityEngine.Color>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Vector3>(L, 2, count - 1))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				UnityEngine.Vector3[] arg1 = ToLua.ToParamsObject<UnityEngine.Vector3>(L, 2, count - 1);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetLine3D(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetLine3D");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRay(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetRay(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetRay(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetRay");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRay3D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetRay3D(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				Vectrosity.VectorLine o = Vectrosity.VectorLine.SetRay3D(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetRay3D");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Draw(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			obj.Draw();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Draw3D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			obj.Draw3D();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LineManagerCheckDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Vectrosity.VectorLine.LineManagerCheckDistance();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LineManagerDisable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Vectrosity.VectorLine.LineManagerDisable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LineManagerEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Vectrosity.VectorLine.LineManagerEnable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Draw3DAuto(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				obj.Draw3DAuto();
				return 0;
			}
			else if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.Draw3DAuto(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.Draw3DAuto");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopDrawing3DAuto(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			obj.StopDrawing3DAuto();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BytesToVector3List(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> o = Vectrosity.VectorLine.BytesToVector3List(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BytesToVector2List(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector2> o = Vectrosity.VectorLine.BytesToVector2List(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<Vectrosity.VectorLine>(L, 1))
			{
				Vectrosity.VectorLine arg0 = (Vectrosity.VectorLine)ToLua.ToObject(L, 1);
				Vectrosity.VectorLine.Destroy(ref arg0);
				ToLua.PushObject(L, arg0);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<Vectrosity.VectorLine[]>(L, 1))
			{
				Vectrosity.VectorLine[] arg0 = ToLua.ToObjectArray<Vectrosity.VectorLine>(L, 1);
				Vectrosity.VectorLine.Destroy(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Collections.Generic.List<Vectrosity.VectorLine>>(L, 1))
			{
				System.Collections.Generic.List<Vectrosity.VectorLine> arg0 = (System.Collections.Generic.List<Vectrosity.VectorLine>)ToLua.ToObject(L, 1);
				Vectrosity.VectorLine.Destroy(arg0);
				return 0;
			}
			else if (count == 2)
			{
				Vectrosity.VectorLine arg0 = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				Vectrosity.VectorLine.Destroy(ref arg0, arg1);
				ToLua.PushObject(L, arg0);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.Destroy");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDistances(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			obj.SetDistances();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			float o = obj.GetLength();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPoint01(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 o = obj.GetPoint01(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg1;
				UnityEngine.Vector2 o = obj.GetPoint01(arg0, out arg1);
				ToLua.Push(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.GetPoint01");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 o = obj.GetPoint(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg1;
				UnityEngine.Vector2 o = obj.GetPoint(arg0, out arg1);
				ToLua.Push(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.GetPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPoint3D01(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 o = obj.GetPoint3D01(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg1;
				UnityEngine.Vector3 o = obj.GetPoint3D01(arg0, out arg1);
				ToLua.Push(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.GetPoint3D01");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPoint3D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 o = obj.GetPoint3D(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg1;
				UnityEngine.Vector3 o = obj.GetPoint3D(arg0, out arg1);
				ToLua.Push(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.GetPoint3D");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEndCap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, Vectrosity.EndCap>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				Vectrosity.EndCap arg1 = (Vectrosity.EndCap)ToLua.ToObject(L, 2);
				Vectrosity.VectorLine.SetEndCap(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<string, Vectrosity.EndCap, float, float, float, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Texture2D>(L, 7, count - 6))
			{
				string arg0 = ToLua.ToString(L, 1);
				Vectrosity.EndCap arg1 = (Vectrosity.EndCap)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				UnityEngine.Texture2D[] arg6 = ToLua.ToParamsObject<UnityEngine.Texture2D>(L, 7, count - 6);
				Vectrosity.VectorLine.SetEndCap(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (TypeChecker.CheckTypes<string, Vectrosity.EndCap, float, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Texture2D>(L, 5, count - 4))
			{
				string arg0 = ToLua.ToString(L, 1);
				Vectrosity.EndCap arg1 = (Vectrosity.EndCap)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.Texture2D[] arg4 = ToLua.ToParamsObject<UnityEngine.Texture2D>(L, 5, count - 4);
				Vectrosity.VectorLine.SetEndCap(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (TypeChecker.CheckTypes<string, Vectrosity.EndCap, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Texture2D>(L, 4, count - 3))
			{
				string arg0 = ToLua.ToString(L, 1);
				Vectrosity.EndCap arg1 = (Vectrosity.EndCap)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				UnityEngine.Texture2D[] arg3 = ToLua.ToParamsObject<UnityEngine.Texture2D>(L, 4, count - 3);
				Vectrosity.VectorLine.SetEndCap(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (TypeChecker.CheckTypes<string, Vectrosity.EndCap>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.Texture2D>(L, 3, count - 2))
			{
				string arg0 = ToLua.ToString(L, 1);
				Vectrosity.EndCap arg1 = (Vectrosity.EndCap)ToLua.ToObject(L, 2);
				UnityEngine.Texture2D[] arg2 = ToLua.ToParamsObject<UnityEngine.Texture2D>(L, 3, count - 2);
				Vectrosity.VectorLine.SetEndCap(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.SetEndCap");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEndCap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Vectrosity.VectorLine.RemoveEndCap(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Selected(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				bool o = obj.Selected(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<LuaInterface.LuaOut<int>>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				int arg1;
				bool o = obj.Selected(arg0, out arg1);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Camera>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.ToObject(L, 3);
				bool o = obj.Selected(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, LuaInterface.LuaOut<int>>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2;
				bool o = obj.Selected(arg0, arg1, out arg2);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg2);
				return 2;
			}
			else if (count == 4 && TypeChecker.CheckTypes<LuaInterface.LuaOut<int>, UnityEngine.Camera>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				int arg1;
				UnityEngine.Camera arg2 = (UnityEngine.Camera)ToLua.ToObject(L, 4);
				bool o = obj.Selected(arg0, out arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, LuaInterface.LuaOut<int>>(L, 4))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg3;
				bool o = obj.Selected(arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg3);
				return 2;
			}
			else if (count == 5 && TypeChecker.CheckTypes<LuaInterface.LuaOut<int>, UnityEngine.Camera>(L, 4))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2;
				UnityEngine.Camera arg3 = (UnityEngine.Camera)ToLua.ToObject(L, 5);
				bool o = obj.Selected(arg0, arg1, out arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg2);
				return 2;
			}
			else if (count == 6)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg3;
				UnityEngine.Camera arg4 = (UnityEngine.Camera)ToLua.CheckObject(L, 6, typeof(UnityEngine.Camera));
				bool o = obj.Selected(arg0, arg1, arg2, out arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg3);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.Selected");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				obj.MakeRect(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Rect, int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.To(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.MakeRect(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				obj.MakeRect(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.MakeRect(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeRoundedRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.MakeRoundedRect(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Rect, float, int, int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.To(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				obj.MakeRoundedRect(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, float, int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				obj.MakeRoundedRect(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				obj.MakeRoundedRect(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeRoundedRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeCircle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.MakeCircle(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<float, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.MakeCircle(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, float>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.MakeCircle(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<float, int, float>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.MakeCircle(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				obj.MakeCircle(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes<float, int, float, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				obj.MakeCircle(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, int, float>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				obj.MakeCircle(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
				obj.MakeCircle(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeCircle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeEllipse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				obj.MakeEllipse(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<float, float, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				obj.MakeEllipse(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, float>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.MakeEllipse(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes<float, float, int, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				obj.MakeEllipse(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, float, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				obj.MakeEllipse(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
				obj.MakeEllipse(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 8)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 8);
				obj.MakeEllipse(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeEllipse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeArc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				obj.MakeArc(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7 && TypeChecker.CheckTypes<float, float, float, float, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				int arg5 = (int)LuaDLL.lua_tonumber(L, 7);
				obj.MakeArc(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, float, float, float>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 7);
				obj.MakeArc(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes<float, float, float, float, int, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				int arg5 = (int)LuaDLL.lua_tonumber(L, 7);
				int arg6 = (int)LuaDLL.lua_tonumber(L, 8);
				obj.MakeArc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, float, float, float, int>(L, 3))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 7);
				int arg6 = (int)LuaDLL.lua_tonumber(L, 8);
				obj.MakeArc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 9)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 8);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 9);
				obj.MakeArc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeArc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeCurve(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector2[]>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				obj.MakeCurve(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3[]>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				obj.MakeCurve(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector2[], int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.MakeCurve(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3[], int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.MakeCurve(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector2[], int, int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.MakeCurve(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3[], int, int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.MakeCurve(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 5);
				obj.MakeCurve(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				obj.MakeCurve(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
				obj.MakeCurve(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeCurve");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeSpline(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector2[]>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				obj.MakeSpline(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3[]>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				obj.MakeSpline(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector2[], bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.MakeSpline(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector2[], int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.MakeSpline(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3[], bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.MakeSpline(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3[], int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.MakeSpline(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector2[], int, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.MakeSpline(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector2[], int, int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.MakeSpline(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3[], int, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.MakeSpline(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3[], int, int>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.MakeSpline(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector2[], int, int, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector2[] arg0 = ToLua.ToStructArray<UnityEngine.Vector2>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				bool arg3 = LuaDLL.lua_toboolean(L, 5);
				obj.MakeSpline(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3[], int, int, bool>(L, 2))
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3[] arg0 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				bool arg3 = LuaDLL.lua_toboolean(L, 5);
				obj.MakeSpline(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeSpline");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				obj.MakeText(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.MakeText(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				obj.MakeText(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 7);
				obj.MakeText(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeWireframe(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
			UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject(L, 2, typeof(UnityEngine.Mesh));
			obj.MakeWireframe(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeCube(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				obj.MakeCube(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				Vectrosity.VectorLine obj = (Vectrosity.VectorLine)ToLua.CheckObject<Vectrosity.VectorLine>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				obj.MakeCube(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vectrosity.VectorLine.MakeCube");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lineVertices(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Vector3[] ret = obj.lineVertices;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineVertices on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lineUVs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Vector2[] ret = obj.lineUVs;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineUVs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lineColors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Color32[] ret = obj.lineColors;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineColors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lineTriangles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			System.Collections.Generic.List<int> ret = obj.lineTriangles;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineTriangles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.RectTransform ret = obj.rectTransform;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Color32 ret = obj.color;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_is2D(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.is2D;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index is2D on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_points2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			System.Collections.Generic.List<UnityEngine.Vector2> ret = obj.points2;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index points2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_points3(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			System.Collections.Generic.List<UnityEngine.Vector3> ret = obj.points3;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index points3 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lineWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float ret = obj.lineWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxWeldDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float ret = obj.maxWeldDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxWeldDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_material(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Material ret = obj.material;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index material on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Texture ret = obj.texture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int ret = obj.layer;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_active(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.active;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index active on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lineType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			Vectrosity.LineType ret = obj.lineType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_capLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float ret = obj.capLength;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index capLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_smoothWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.smoothWidth;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_smoothColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.smoothColor;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_joins(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			Vectrosity.Joins ret = obj.joins;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joins on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isAutoDrawing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.isAutoDrawing;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isAutoDrawing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int ret = obj.drawStart;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawEnd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int ret = obj.drawEnd;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawEnd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_endPointsUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int ret = obj.endPointsUpdate;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endPointsUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_endCap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			string ret = obj.endCap;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endCap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_continuousTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.continuousTexture;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index continuousTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Transform ret = obj.drawTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useViewportCoords(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.useViewportCoords;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useViewportCoords on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float ret = obj.textureScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float ret = obj.textureOffset;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_matrix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Matrix4x4 ret = obj.matrix;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index matrix on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int ret = obj.drawDepth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_collider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.collider;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index collider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_trigger(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.trigger;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index trigger on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_physicsMaterial(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.PhysicsMaterial2D ret = obj.physicsMaterial;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index physicsMaterial on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_alignOddWidthToPixels(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool ret = obj.alignOddWidthToPixels;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index alignOddWidthToPixels on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canvas(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Vectrosity.VectorLine.canvas);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_camTransformPosition(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Vectrosity.VectorLine.camTransformPosition);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_camTransformExists(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Vectrosity.VectorLine.camTransformExists);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lineManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Vectrosity.VectorLine.lineManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Color32 arg0 = StackTraits<UnityEngine.Color32>.Check(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_points2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			System.Collections.Generic.List<UnityEngine.Vector2> arg0 = (System.Collections.Generic.List<UnityEngine.Vector2>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector2>));
			obj.points2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index points2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_points3(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			obj.points3 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index points3 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lineWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lineWidth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxWeldDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxWeldDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxWeldDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_material(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			obj.material = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index material on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.texture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_layer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.layer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_active(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.active = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index active on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lineType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			Vectrosity.LineType arg0 = (Vectrosity.LineType)ToLua.CheckObject(L, 2, typeof(Vectrosity.LineType));
			obj.lineType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lineType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_capLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.capLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index capLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_smoothWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.smoothWidth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_smoothColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.smoothColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_joins(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			Vectrosity.Joins arg0 = (Vectrosity.Joins)ToLua.CheckObject(L, 2, typeof(Vectrosity.Joins));
			obj.joins = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joins on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.drawStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawEnd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.drawEnd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawEnd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_endPointsUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.endPointsUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endPointsUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_endCap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.endCap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endCap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_continuousTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.continuousTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index continuousTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.drawTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useViewportCoords(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useViewportCoords = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useViewportCoords on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.textureScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.textureOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_matrix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 2);
			obj.matrix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index matrix on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.drawDepth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_collider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.collider = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index collider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_trigger(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.trigger = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index trigger on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_physicsMaterial(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			UnityEngine.PhysicsMaterial2D arg0 = (UnityEngine.PhysicsMaterial2D)ToLua.CheckObject(L, 2, typeof(UnityEngine.PhysicsMaterial2D));
			obj.physicsMaterial = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index physicsMaterial on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alignOddWidthToPixels(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vectrosity.VectorLine obj = (Vectrosity.VectorLine)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.alignOddWidthToPixels = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index alignOddWidthToPixels on a nil value");
		}
	}
}

