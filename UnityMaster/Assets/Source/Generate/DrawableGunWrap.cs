//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DrawableGunWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DrawableGun), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("ChangeColourAtPoint", ChangeColourAtPoint);
		L.RegFunction("ColourBetween", ColourBetween);
		L.RegFunction("MarkPixelsToColour", MarkPixelsToColour);
		L.RegFunction("MarkPixelToChange", MarkPixelToChange);
		L.RegFunction("ApplyMarkedPixelChanges", ApplyMarkedPixelChanges);
		L.RegFunction("ColourPixels", ColourPixels);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Pen_Colour", get_Pen_Colour, set_Pen_Colour);
		L.RegVar("Pen_Width", get_Pen_Width, set_Pen_Width);
		L.RegVar("Drawing_Layers", get_Drawing_Layers, set_Drawing_Layers);
		L.RegVar("currentIndex", get_currentIndex, set_currentIndex);
		L.RegVar("showIndex", get_showIndex, set_showIndex);
		L.RegVar("OnDrawableGunLua", get_OnDrawableGunLua, set_OnDrawableGunLua);
		L.RegVar("drawTempParam", get_drawTempParam, set_drawTempParam);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeColourAtPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DrawableGun obj = (DrawableGun)ToLua.CheckObject<DrawableGun>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.ChangeColourAtPoint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColourBetween(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DrawableGun obj = (DrawableGun)ToLua.CheckObject<DrawableGun>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			obj.ColourBetween(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkPixelsToColour(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DrawableGun obj = (DrawableGun)ToLua.CheckObject<DrawableGun>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
			obj.MarkPixelsToColour(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkPixelToChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DrawableGun obj = (DrawableGun)ToLua.CheckObject<DrawableGun>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
			obj.MarkPixelToChange(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyMarkedPixelChanges(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DrawableGun obj = (DrawableGun)ToLua.CheckObject<DrawableGun>(L, 1);
			obj.ApplyMarkedPixelChanges();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColourPixels(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DrawableGun obj = (DrawableGun)ToLua.CheckObject<DrawableGun>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
			obj.ColourPixels(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pen_Colour(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			UnityEngine.Color ret = obj.Pen_Colour;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pen_Colour on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pen_Width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			int ret = obj.Pen_Width;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pen_Width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Drawing_Layers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			UnityEngine.LayerMask ret = obj.Drawing_Layers;
			ToLua.PushLayerMask(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Drawing_Layers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			int ret = obj.currentIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			int ret = obj.showIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDrawableGunLua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			LuaInterface.LuaFunction ret = obj.OnDrawableGunLua;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDrawableGunLua on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawTempParam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			double ret = obj.drawTempParam;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawTempParam on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pen_Colour(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.Pen_Colour = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pen_Colour on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pen_Width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Pen_Width = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pen_Width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Drawing_Layers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			UnityEngine.LayerMask arg0 = ToLua.ToLayerMask(L, 2);
			obj.Drawing_Layers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Drawing_Layers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.currentIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.showIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDrawableGunLua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.OnDrawableGunLua = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDrawableGunLua on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawTempParam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DrawableGun obj = (DrawableGun)o;
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.drawTempParam = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawTempParam on a nil value");
		}
	}
}

